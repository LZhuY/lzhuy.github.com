---
layout: post
title:  "leveldb之数据压缩"
date:   2018-05-14 11:26:00
categories: data_structure
tags: data_structure
---

DBImpl::BackgroundCompaction是压缩过程的主要接口。在这个接口中主要完成两步重要的工作。
1、把imem中的KEY/VAl对dump到level0中的sstable文件中。
2、合并sstable文件。

{% highlight ruby %}

void DBImpl::BackgroundCompaction() {///后台压缩操作
  if (imm_ != nullptr) { 
    CompactMemTable();//将imm_写到level 0,就是一个sstable中。
    return;
  }
  CompactionState* compact = new CompactionState(c);
  status = DoCompactionWork(compact); ///合并多个sstable
  }
{% endhighlight %}

{% highlight ruby %}
class MemTable{
	void Add(SequenceNumber s, ValueType type, const Slice& key, const Slice& value){ //添加接口，向arena申请空间，
																					  //把KEY，VAl，TYPE，seq解析到空间，然后insert到跳表中。
		char* buf = arena_.Allocate(encoded_len); /// arena先申请了大块内存，这里返回一小块，相当于保存到arena中了。
		char* p = EncodeVarint32(buf, internal_key_size);
		memcpy(p, key.data(), key_size);
		p += key_size;
		EncodeFixed64(p, (s << 8) | type);
		p += 8;
		p = EncodeVarint32(p, val_size);
		memcpy(p, value.data(), val_size);
		assert(p + val_size == buf + encoded_len);
		table_.Insert(buf); /// buff指针加入到table中了， table is a SkipList。
	}

	bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) ///从跳表中查找。

	///注意这部分，设计到表中数据的排列顺序，`memtable`的keycompareator接口
	///理解这部分后，理解在DBImpl::DoCompactionWork接口中遍历NewMergingIterator实现多余信息删除就容易了。
	MemTable::MemTable(const InternalKeyComparator& cmp): comparator_(cmp), refs_(0),table_(comparator_, &arena_){
	}
	int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)
    const {
		// Internal keys are encoded as length-prefixed strings.
		Slice a = GetLengthPrefixedSlice(aptr);
		Slice b = GetLengthPrefixedSlice(bptr);
		return comparator.Compare(a, b);
	}
	int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {
		// Order by:
		//    increasing user key (according to user-supplied comparator)
		//    decreasing sequence number
		//    decreasing type (though sequence# should be enough to disambiguate)
		int r = user_comparator_->Compare(ExtractUserKey(akey), ExtractUserKey(bkey));
		if (r == 0) {
			const uint64_t anum = DecodeFixed64(akey.data() + akey.size() - 8);
			const uint64_t bnum = DecodeFixed64(bkey.data() + bkey.size() - 8);
			if (anum > bnum) {
				r = -1;
			} else if (anum < bnum) {
				r = +1;
			}
		}
			return r;
	}


	Status DBImpl::DoCompactionWork(CompactionState* compact) { ///合并数据接口
		Iterator* input = versions_->MakeInputIterator(compact->compaction);
		for (; input->Valid() && !shutting_down_.Acquire_Load(); ) {
			///input iterator已经封装好多个`sstable`, 每次能拿到KEY最小的出来。
			///这样在处理第一个处理的KEY时直接写入合并文件，否则删除。因为第一个出现的
			///KEY的seq是相同strkey中seq最大的。
		}
	}
}

{% endhighlight %}

[image02](/assets/img/leveldb/sstable_format.png)