---
layout: post
title:  "跳表"
date:   2018-05-16 22:21:49
categories: data_structure
tags: data_structure
---

很多优秀的开源软件中都使用了跳表，如Redis、levelDB等。跳表跟红黑树一样时间复杂度都是log(n),不过相比较红黑树更加容易实现。

{% highlight ruby %}

#ifndef SKIP_LIST_H
#define SKIP_LIST_H

#include <iostream>
#include <stdlib.h>
#include <time.h>

const int MAX_LEVEL = 10;

int randHight(){
	srand(time(NULL));
	int hight = rand()%MAX_LEVEL;
	return hight;
}

template<typename Key, class Compare>
class SkipList{
	private:
		struct Node;
		Node* head_;
		int maxLevel_;
		Compare const comp_;
	public:
		SkipList(Compare comp);
		void Insert(Key&);
		Node* findGreaterOrEqul(Key&, Node**);
		int isAfter(Key&, Node*);
};

template<typename Key, class Compare>
struct SkipList<Key, Compare>::Node{
	Key key_;
	int level_;
	Node** next_;

	Node(Key key, int level):key_(key),level_(level){
		next_ = new Node*[level];
	}

	Node* next(int level){
		if(level >= level_) return NULL;
		return next_[level];
	}

	Node* setNext(int level, Node* n){
		next_[level] = n;
	}
};

template<typename Key, class Compare>
int SkipList<Key, Compare>::isAfter(Key& key, Node* n){
	int r = comp_(key, n->key_);
	return r;
}

template<typename Key, class Compare>
SkipList<Key, Compare>::SkipList(Compare comp):maxLevel_(0),comp_(comp){
	head_ = new Node(0, MAX_LEVEL);
}

template<typename Key, class Compare>
typename SkipList<Key, Compare>::Node* SkipList<Key, Compare>::findGreaterOrEqul(Key& key, Node** n){
	Node* x = head_;
	int level = MAX_LEVEL;
	while(1){
		while( comp_(x->next_(level)->key_, key) < 0)
			x = x->next(level);
		n[level] = x;
		if(level == 0)
			return NULL;
		level -= 1;
	}
}

template<typename Key, class Compare>
void SkipList<Key, Compare>::Insert(Key& key){
	Node** node = new Node*[MAX_LEVEL];
	FindGreaterOrEquel(key, node);

	int hight = randHight();
	Node* newNode = new Node(key, hight);
	for(int i=0;i<hight;i++)
		newNode->setNext(i, node[i]->next(i));
	for(int i=0;i<hight;i++)
		node[i]->setNext(i, newNode);
}
#endif

{% endhighlight %}