---
layout: post
title:  "zmq"
date:   2018-10-09 10:08:00
categories: distributed_system
tags: distributed_system
---

想要拯救这个世界，我们需要做两件事情：
一，如何在任何地点连接任何两个应用程序；
二、将这个解决方案用最为简单的方式包装起来，供程序员使用。

ZMQ会为你做些什么：它会将消息快速高效地发送给其他节点，这里的节点可以是线程、进程、或是其他计算机；ZMQ为应用程序提供了一套简单的套接字API，不用考虑实际使用的协议类型（进程内、进程间、TPC、或广播）；当节点调动时，ZMQ会自动进行连接或重连；无论是发送消息还是接收消息，ZMQ都会先将消息放入队列中，并保证进程不会因为内存溢出而崩溃，适时地将消息写入磁盘；ZMQ会处理套接字异常；所有的I/O操作都在后台进行；ZMQ不会产生死锁。

创建和销毁套接字：zmq_socket(), zmq_close()
配置和读取套接字选项：zmq_setsockopt(), zmq_getsockopt()
为套接字建立连接：zmq_bind(), zmq_connect()
发送和接收消息：zmq_send(), zmq_recv()

zmq_msg_t mouse;
zmq_msg_init (&mouse);
zmq_msg_close (&mouse);

ZMQ的核心消息模式有：
请求-应答模式 将一组服务端和一组客户端相连，用于远程过程调用或任务分发。
发布-订阅模式 将一组发布者和一组订阅者相连，用于数据分发。
管道模式 使用扇入或扇出的形式组装多个节点，可以产生多个步骤或循环，用于构建并行处理架构。
我们在第一章中已经讲述了这些模式，不过还有一种模式是为那些仍然认为ZMQ是类似TCP那样点对点连接的人们准备的：
排他对接模式 将两个套接字一对一地连接起来，这种模式应用场景很少，我们会在本章最末尾看到一个示例。
zmq_socket()函数的说明页中有对所有消息模式的说明，比较清楚，因此值得研读几次。我们会介绍每种消息模式的内容和应用场景。
以下是合法的套接字连接-绑定对（一端绑定、一端连接即可）：

PUB - SUB
REQ - REP
REQ - ROUTER
DEALER - REP
DEALER - ROUTER
DEALER - DEALER
ROUTER - ROUTER
PUSH - PULL
PAIR - PAIR